
lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 000000c8  00000000  00000000  00000252  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000076b  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000003f7  00000000  00000000  00000a85  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000057f  00000000  00000000  00000e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  0000015c  00000000  00000000  000013fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000023e  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000352  00000000  00000000  00001796  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000088  00000000  00000000  00001ae8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	86 c0       	rjmp	.+268    	; 0x112 <__bad_interrupt>
   6:	00 00       	nop
   8:	84 c0       	rjmp	.+264    	; 0x112 <__bad_interrupt>
   a:	00 00       	nop
   c:	82 c0       	rjmp	.+260    	; 0x112 <__bad_interrupt>
   e:	00 00       	nop
  10:	80 c0       	rjmp	.+256    	; 0x112 <__bad_interrupt>
  12:	00 00       	nop
  14:	7e c0       	rjmp	.+252    	; 0x112 <__bad_interrupt>
  16:	00 00       	nop
  18:	7c c0       	rjmp	.+248    	; 0x112 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	7a c0       	rjmp	.+244    	; 0x112 <__bad_interrupt>
  1e:	00 00       	nop
  20:	78 c0       	rjmp	.+240    	; 0x112 <__bad_interrupt>
  22:	00 00       	nop
  24:	76 c0       	rjmp	.+236    	; 0x112 <__bad_interrupt>
  26:	00 00       	nop
  28:	74 c0       	rjmp	.+232    	; 0x112 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	72 c0       	rjmp	.+228    	; 0x112 <__bad_interrupt>
  2e:	00 00       	nop
  30:	70 c0       	rjmp	.+224    	; 0x112 <__bad_interrupt>
  32:	00 00       	nop
  34:	6e c0       	rjmp	.+220    	; 0x112 <__bad_interrupt>
  36:	00 00       	nop
  38:	6c c0       	rjmp	.+216    	; 0x112 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	6a c0       	rjmp	.+212    	; 0x112 <__bad_interrupt>
  3e:	00 00       	nop
  40:	68 c0       	rjmp	.+208    	; 0x112 <__bad_interrupt>
  42:	00 00       	nop
  44:	66 c0       	rjmp	.+204    	; 0x112 <__bad_interrupt>
  46:	00 00       	nop
  48:	64 c0       	rjmp	.+200    	; 0x112 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	62 c0       	rjmp	.+196    	; 0x112 <__bad_interrupt>
  4e:	00 00       	nop
  50:	60 c0       	rjmp	.+192    	; 0x112 <__bad_interrupt>
  52:	00 00       	nop
  54:	5e c0       	rjmp	.+188    	; 0x112 <__bad_interrupt>
  56:	00 00       	nop
  58:	5c c0       	rjmp	.+184    	; 0x112 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	5a c0       	rjmp	.+180    	; 0x112 <__bad_interrupt>
  5e:	00 00       	nop
  60:	58 c0       	rjmp	.+176    	; 0x112 <__bad_interrupt>
  62:	00 00       	nop
  64:	56 c0       	rjmp	.+172    	; 0x112 <__bad_interrupt>
  66:	00 00       	nop
  68:	54 c0       	rjmp	.+168    	; 0x112 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	52 c0       	rjmp	.+164    	; 0x112 <__bad_interrupt>
  6e:	00 00       	nop
  70:	50 c0       	rjmp	.+160    	; 0x112 <__bad_interrupt>
  72:	00 00       	nop
  74:	4e c0       	rjmp	.+156    	; 0x112 <__bad_interrupt>
  76:	00 00       	nop
  78:	4c c0       	rjmp	.+152    	; 0x112 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	4a c0       	rjmp	.+148    	; 0x112 <__bad_interrupt>
  7e:	00 00       	nop
  80:	48 c0       	rjmp	.+144    	; 0x112 <__bad_interrupt>
  82:	00 00       	nop
  84:	46 c0       	rjmp	.+140    	; 0x112 <__bad_interrupt>
  86:	00 00       	nop
  88:	44 c0       	rjmp	.+136    	; 0x112 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	42 c0       	rjmp	.+132    	; 0x112 <__bad_interrupt>
  8e:	00 00       	nop
  90:	40 c0       	rjmp	.+128    	; 0x112 <__bad_interrupt>
  92:	00 00       	nop
  94:	3e c0       	rjmp	.+124    	; 0x112 <__bad_interrupt>
  96:	00 00       	nop
  98:	3c c0       	rjmp	.+120    	; 0x112 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	3a c0       	rjmp	.+116    	; 0x112 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	38 c0       	rjmp	.+112    	; 0x112 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	36 c0       	rjmp	.+108    	; 0x112 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	34 c0       	rjmp	.+104    	; 0x112 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	32 c0       	rjmp	.+100    	; 0x112 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	30 c0       	rjmp	.+96     	; 0x112 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	2e c0       	rjmp	.+92     	; 0x112 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	2c c0       	rjmp	.+88     	; 0x112 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	2a c0       	rjmp	.+84     	; 0x112 <__bad_interrupt>
  be:	00 00       	nop
  c0:	28 c0       	rjmp	.+80     	; 0x112 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	26 c0       	rjmp	.+76     	; 0x112 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	24 c0       	rjmp	.+72     	; 0x112 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	22 c0       	rjmp	.+68     	; 0x112 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	20 c0       	rjmp	.+64     	; 0x112 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	1e c0       	rjmp	.+60     	; 0x112 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	1c c0       	rjmp	.+56     	; 0x112 <__bad_interrupt>
  da:	00 00       	nop
  dc:	1a c0       	rjmp	.+52     	; 0x112 <__bad_interrupt>
  de:	00 00       	nop
  e0:	18 c0       	rjmp	.+48     	; 0x112 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee ec       	ldi	r30, 0xCE	; 206
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	13 d0       	rcall	.+38     	; 0x136 <main>
 110:	5c c0       	rjmp	.+184    	; 0x1ca <_exit>

00000112 <__bad_interrupt>:
 112:	76 cf       	rjmp	.-276    	; 0x0 <__vectors>

00000114 <delay_1_micros>:
void delay_1_micros() {
	volatile uint8_t j=0;
	j++;
	j++;
}
void delay_micros(uint8_t n)   {
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	1f 92       	push	r1
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	19 82       	std	Y+1, r1	; 0x01
 120:	89 81       	ldd	r24, Y+1	; 0x01
 122:	8f 5f       	subi	r24, 0xFF	; 255
 124:	89 83       	std	Y+1, r24	; 0x01
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	89 83       	std	Y+1, r24	; 0x01
 12c:	0f 90       	pop	r0
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <delay_ms>:
	 // skriv kod h√§r
}
void delay_ms(uint8_t n)   {
 134:	08 95       	ret

00000136 <main>:
#include "lcd/lcd.h"

int main(void)
{

	numkey_init();
 136:	3e d0       	rcall	.+124    	; 0x1b4 <numkey_init>
	lcd_init();
 138:	1c d0       	rcall	.+56     	; 0x172 <lcd_init>
	lcd_clear();
 13a:	3b d0       	rcall	.+118    	; 0x1b2 <lcd_clear>
 13c:	ff cf       	rjmp	.-2      	; 0x13c <main+0x6>

0000013e <write_byte>:

/*
 * Write a byte of data to the LCD, starting with the most significant bit.
 */
static void write_byte(uint8_t data)
{
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	08 2f       	mov	r16, r24
	uint8_t i;
	// Set CS pin LOW
	CLR_BIT(PORTB, 6);
 148:	85 b1       	in	r24, 0x05	; 5
 14a:	18 e0       	ldi	r17, 0x08	; 8
	for (i = 0; i < 8; i++) {
		// Write MSB
		if (data & 0x80) {		// bit is 1?
			SET_BIT(PORTH, 6);	// write 1
		} else {				// bit is 0?
			CLR_BIT(PORTH, 6);	// write 0
 14c:	c2 e0       	ldi	r28, 0x02	; 2
 14e:	d1 e0       	ldi	r29, 0x01	; 1
	// Set CS pin LOW
	CLR_BIT(PORTB, 6);
	// Write byte
	for (i = 0; i < 8; i++) {
		// Write MSB
		if (data & 0x80) {		// bit is 1?
 150:	00 23       	and	r16, r16
 152:	14 f4       	brge	.+4      	; 0x158 <write_byte+0x1a>
			SET_BIT(PORTH, 6);	// write 1
 154:	88 81       	ld	r24, Y
 156:	01 c0       	rjmp	.+2      	; 0x15a <write_byte+0x1c>
		} else {				// bit is 0?
			CLR_BIT(PORTH, 6);	// write 0
 158:	88 81       	ld	r24, Y
		}
		// shift out data to LCD
		SET_BIT(PORTH, 5);
 15a:	88 81       	ld	r24, Y
		delay_1_micros();
 15c:	db df       	rcall	.-74     	; 0x114 <delay_1_micros>
		CLR_BIT(PORTH, 5);
 15e:	88 81       	ld	r24, Y
		// shift to next bit
		data = data << 1;
 160:	00 0f       	add	r16, r16
 162:	11 50       	subi	r17, 0x01	; 1
{
	uint8_t i;
	// Set CS pin LOW
	CLR_BIT(PORTB, 6);
	// Write byte
	for (i = 0; i < 8; i++) {
 164:	a9 f7       	brne	.-22     	; 0x150 <write_byte+0x12>
		CLR_BIT(PORTH, 5);
		// shift to next bit
		data = data << 1;
	}
	// Set CS pin HIGH
	SET_BIT(PORTB, 6);
 166:	85 b1       	in	r24, 0x05	; 5
}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	08 95       	ret

00000172 <lcd_init>:
 *	- configuration of LCD communication
 */
void lcd_init(void)
{
	// Configure I/O
	SET_BIT(DDRH, 5);		// Clock pin (output)
 172:	e1 e0       	ldi	r30, 0x01	; 1
 174:	f1 e0       	ldi	r31, 0x01	; 1
 176:	80 81       	ld	r24, Z
	SET_BIT(DDRH, 6);		// Data pin (output)
 178:	80 81       	ld	r24, Z
	SET_BIT(DDRB, 4);		// Data/command pin (output)
 17a:	84 b1       	in	r24, 0x04	; 4
	SET_BIT(DDRB, 5);		// Reset pin (output)
 17c:	84 b1       	in	r24, 0x04	; 4
	SET_BIT(DDRB, 6);		// CS/SS pin (output)
 17e:	84 b1       	in	r24, 0x04	; 4
	
	// Initialize LCD
	delay_ms(20);			// Let Vcc stabilize after power-up!
 180:	84 e1       	ldi	r24, 0x14	; 20
 182:	d8 df       	rcall	.-80     	; 0x134 <delay_ms>
	SET_BIT(PORTB, 5);		// Set Reset pin HIGH
 184:	85 b1       	in	r24, 0x05	; 5
	delay_ms(10);			// Wait a little...
 186:	8a e0       	ldi	r24, 0x0A	; 10
 188:	d5 df       	rcall	.-86     	; 0x134 <delay_ms>
	SET_BIT(PORTB, 6);		// Set CS pin HIGH (normal level)
 18a:	85 b1       	in	r24, 0x05	; 5
	uint8_t character;
	uint8_t i;
	
	if (lcd_reg == CMD) {
		// Prepare to send a command
		CLR_BIT(PORTB, 4);
 18c:	85 b1       	in	r24, 0x05	; 5
		// Write command
		write_byte(data);
 18e:	81 e2       	ldi	r24, 0x21	; 33
 190:	d6 df       	rcall	.-84     	; 0x13e <write_byte>
	uint8_t character;
	uint8_t i;
	
	if (lcd_reg == CMD) {
		// Prepare to send a command
		CLR_BIT(PORTB, 4);
 192:	85 b1       	in	r24, 0x05	; 5
		// Write command
		write_byte(data);
 194:	83 e1       	ldi	r24, 0x13	; 19
 196:	d3 df       	rcall	.-90     	; 0x13e <write_byte>
	uint8_t character;
	uint8_t i;
	
	if (lcd_reg == CMD) {
		// Prepare to send a command
		CLR_BIT(PORTB, 4);
 198:	85 b1       	in	r24, 0x05	; 5
		// Write command
		write_byte(data);
 19a:	85 ec       	ldi	r24, 0xC5	; 197
 19c:	d0 df       	rcall	.-96     	; 0x13e <write_byte>
	uint8_t character;
	uint8_t i;
	
	if (lcd_reg == CMD) {
		// Prepare to send a command
		CLR_BIT(PORTB, 4);
 19e:	85 b1       	in	r24, 0x05	; 5
		// Write command
		write_byte(data);
 1a0:	84 e0       	ldi	r24, 0x04	; 4
 1a2:	cd df       	rcall	.-102    	; 0x13e <write_byte>
	uint8_t character;
	uint8_t i;
	
	if (lcd_reg == CMD) {
		// Prepare to send a command
		CLR_BIT(PORTB, 4);
 1a4:	85 b1       	in	r24, 0x05	; 5
		// Write command
		write_byte(data);
 1a6:	80 e2       	ldi	r24, 0x20	; 32
 1a8:	ca df       	rcall	.-108    	; 0x13e <write_byte>
	uint8_t character;
	uint8_t i;
	
	if (lcd_reg == CMD) {
		// Prepare to send a command
		CLR_BIT(PORTB, 4);
 1aa:	85 b1       	in	r24, 0x05	; 5
		// Write command
		write_byte(data);
 1ac:	8c e0       	ldi	r24, 0x0C	; 12
 1ae:	c7 cf       	rjmp	.-114    	; 0x13e <write_byte>
 1b0:	08 95       	ret

000001b2 <lcd_clear>:

/*
 * Clears the LCD and moves the cursor to position row 0, column 0.
 */
void lcd_clear(void)
{
 1b2:	08 95       	ret

000001b4 <numkey_init>:
 * This function configures the ports and pins to be used by the keyboard.
 */
void numkey_init(void)
{
	// Configure I/O
	SET_BIT(DDRG, 5);		// Column 0 (output)
 1b4:	83 b3       	in	r24, 0x13	; 19
	SET_BIT(DDRE, 3);		// Column 1 (output)
 1b6:	8d b1       	in	r24, 0x0d	; 13
	SET_BIT(DDRH, 3);		// Column 2 (output)
 1b8:	e1 e0       	ldi	r30, 0x01	; 1
 1ba:	f1 e0       	ldi	r31, 0x01	; 1
 1bc:	80 81       	ld	r24, Z
	SET_BIT(DDRH, 4);		// Column 3 (output)
 1be:	80 81       	ld	r24, Z
	CLR_BIT(DDRF, 5);		// Row 0 (input)
 1c0:	80 b3       	in	r24, 0x10	; 16
	CLR_BIT(DDRF, 4);		// Row 1 (input)
 1c2:	80 b3       	in	r24, 0x10	; 16
	CLR_BIT(DDRE, 4);		// Row 2 (input)
 1c4:	8d b1       	in	r24, 0x0d	; 13
	CLR_BIT(DDRE, 5);		// Row 3 (input)
 1c6:	8d b1       	in	r24, 0x0d	; 13
 1c8:	08 95       	ret

000001ca <_exit>:
 1ca:	f8 94       	cli

000001cc <__stop_program>:
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <__stop_program>
